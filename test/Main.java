// TODO except the tested parts, there are still things need to be done(the behavior functions of each role): scheduler task to allocate the driver, driver to process the status of the delivery, and how user order things, and route
package test;

import authentication.Customer;
import authentication.Driver;
import authentication.Scheduler;
import authentication.User;
import authentication.UserRole;
import service.CustomerService;
import data.*;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        DatabaseManager dbManager = DatabaseManager.getInstance();
        testDatabaseOperations(dbManager);

    }

    private static void testDatabaseOperations(DatabaseManager dbManager) {
        System.out.println("-------------------------------------");
        System.out.println("Testing Database Operations");
        System.out.println("-------------------------------------");
        // 1. Test User Operations
        System.out.println("Testing User Operations");
        User testCustomer = new Customer("customer@example.com", "password123", "123-456-7890");
        User testScheduler = new Scheduler("scheduler@example.com", "password456", "987-654-3210");
        Driver testDriver = new Driver("driver@example.com", "password789", "555-123-4567", "ABC-123", 5000);
        // Add the users
        System.out.println("Adding users...");
        dbManager.addUser(testCustomer);
        dbManager.addUser(testScheduler);
        dbManager.addUser(testDriver);
        System.out.println("Users added successfully. (Check if the ids are autogenerated)");
        // Check if the users have been added by getting them with their emails
        User retrievedCustomer = dbManager.getUserByEmail("customer@example.com");
        User retrievedScheduler = dbManager.getUserByEmail("scheduler@example.com");
        User retrievedDriver = dbManager.getUserByEmail("driver@example.com");
        if (retrievedCustomer != null && retrievedScheduler != null && retrievedDriver != null) {
            System.out.println("Users retrieved successfully by their emails: " + retrievedCustomer.getEmail() + ", "
                    + retrievedScheduler.getEmail() + ", " + retrievedDriver.getEmail());
        }
        // Update user
        testDriver.setPhoneNumber("111-222-3333");
        testDriver.setTruckCapacityKg(7000);
        System.out.println("Updating driver...");
        boolean updated = dbManager.updateUser(testDriver);
        if (updated) {
            System.out.println("Driver updated successfully");
        }
        // Get user by id
        User retrievedDriverById = dbManager.getUserById(testDriver.getId());
        if (retrievedDriverById != null) {
            System.out.println("Driver retrieved by their id: " + retrievedDriverById.getPhoneNumber()
                    + " with capacity:" + ((Driver) retrievedDriverById).getTruckCapacityKg());
        }
        System.out.println("-------------------------------------");
        // 2. Test Category Operations
        System.out.println("Testing Category Operations");
        Category category1 = new Category("Electronics");
        Category category2 = new Category("Food");
        System.out.println("Adding categories...");
        dbManager.addCategory(category1);
        dbManager.addCategory(category2);
        System.out.println("Categories added successfully. (Check if the ids are autogenerated)");
        Category retrievedCategory = dbManager.getCategoryById(category1.getId());
        if (retrievedCategory != null) {
            System.out.println("Category retrieved with id: " + retrievedCategory.getId() + " and name:"
                    + retrievedCategory.getName());
        }
        System.out.println("-------------------------------------");
        // 3. Test Product Operations
        System.out.println("Testing Product Operations");
        Product testProduct1 = new Product("Laptop", 2.5, category1.getId());
        Product testProduct2 = new Product("Banana", 0.15, category2.getId());
        System.out.println("Adding products...");
        dbManager.addProduct(testProduct1);
        dbManager.addProduct(testProduct2);
        System.out.println("Products added successfully. (Check if the ids are autogenerated)");
        Product retrievedProduct = dbManager.getProductById(testProduct1.getId());
        if (retrievedProduct != null) {
            System.out.println("Product retrieved by its id: " + retrievedProduct.getName());
        }
        List<Product> productList = dbManager.getAllProducts();
        System.out.println("All products: ");
        for (Product p : productList) {
            System.out.println(p.getName());
        }
        System.out.println("-------------------------------------");
        // 4. Test Stock Operations
        System.out.println("Testing Stock Operations");
        Stock stock1 = new Stock(testProduct1.getId(), 100);
        Stock stock2 = new Stock(testProduct2.getId(), 100);
        System.out.println("Adding stock...");
        dbManager.addStock(stock1);
        dbManager.addStock(stock2);
        System.out.println("Stock added successfully");
        Stock retrievedStock = dbManager.getStockByProductId(testProduct1.getId());
        if (retrievedStock != null) {
            System.out.println("Stock of product " + testProduct1.getName() + " : " + retrievedStock.getQuantityKg());
        }
        System.out.println("-------------------------------------");
        // 5. Test Mission Operations
        System.out.println("Testing Mission Operations");
        Mission testMission1 = new Mission();
        testMission1.setDriverId(testDriver.getId());
        testMission1.setRoute("Warehouse, Customer A, Customer B, Warehouse");
        testMission1.setStatus("Assigned");
        System.out.println("Adding mission...");
        dbManager.addMission(testMission1);
        System.out.println("Mission added successfully. (Check if the ids are autogenerated)");
        List<Mission> assignedMissions = dbManager.getMissionsByDriverId(testDriver.getId(), "Assigned");
        System.out.println("Missions assigned to driver: " + testDriver.getEmail());
        for (Mission m : assignedMissions) {
            System.out.println(m.getRoute() + " with status: " + m.getStatus());
        }
        testMission1.setStatus("Completed");
        testMission1.setTimeCompleted(new Timestamp(System.currentTimeMillis()));
        System.out.println("Updating mission...");
        boolean updatedMission = dbManager.updateMission(testMission1);
        if (updatedMission) {
            System.out.println("Mission updated successfully");
        }
        List<Mission> completedMissions = dbManager.getMissionsByDriverId(testDriver.getId(), "Completed");
        System.out.println("Missions completed by driver: " + testDriver.getEmail());
        for (Mission m : completedMissions) {
            System.out.println(
                    m.getRoute() + " with status: " + m.getStatus() + " and completion time: " + m.getTimeCompleted());
        }
        System.out.println("-------------------------------------");
        // 6 Test Delivery operations
        System.out.println("Testing Delivery Operations");
        List<ProductItem> productItems = new ArrayList<>();
        productItems.add(new ProductItem(testProduct1, 2));
        productItems.add(new ProductItem(testProduct2, 5));
        CustomerService customerService = new CustomerService();
        System.out.println("Adding delivery with product items...");
        customerService.createDelivery(testCustomer, productItems, new Date(), "Test Address", testDriver.getId());

        List<Delivery> retrievedDeliveries = dbManager.getAllDeliveries();
        if (retrievedDeliveries != null && retrievedDeliveries.size() > 0) {
            Delivery retrievedDelivery = retrievedDeliveries.get(0);
            System.out.println("Delivery created with id: " + retrievedDelivery.getId() + " for user id: "
                    + retrievedDelivery.getCustomerId());

            List<ProductItem> items = dbManager.getDeliveryItems(retrievedDelivery.getId());
            System.out.println("Delivery items: ");
            for (ProductItem item : items) {
                System.out.println("Product name: " + item.getProduct().getName() + " quantity: " + item.getQuantity());
            }
        }
        System.out.println("-------------------------------------");
    }
}

/*
 * Phase 1: Core Data Models and Database Interaction
 * 1. User.java:
 * ○ This is the base class for all users.
 * ○ Implement the attributes (id, email, password, phoneNumber, role,
 * truckRegNumber, truckCapacityKg, createdAt, updatedAt) and their
 * corresponding getters and setters.
 * ○ Implement the basic methods getId(), getRole(), getEmail(), getPassword(),
 * login(), register() and update(), these will be implemented fully in the
 * service classes.
 * 2. Customer.java, Scheduler.java, Driver.java:
 * ○ These classes extend User.
 * ○ Start with the basic setup, no need to implement the specific methods of
 * each user at this time, just add the inheritance using the extends keyword
 * 3. Product.java:
 * ○ Represents a product in the system.
 * ○ Implement the attributes (id, name, weightKg, createdAt, updatedAt) and
 * their getters.
 * 4. Delivery.java:
 * ○ Represents a delivery order.
 * ○ Implement the attributes (id, customerId, deliveryDate, deliveryAddress,
 * createdAt, updatedAt) and their getters.
 * 5. Mission.java:
 * ○ Represents a delivery mission assigned to a driver.
 * ○ Implement the attributes (id, driverId, route, status, timeCompleted,
 * createdAt, updatedAt) and their corresponding getters and setters.
 * 6. DatabaseManager.java:
 * ○ Handles all database interactions.
 * ○ Implement methods:
 * § getConnection(): Establish a connection to the MySQL database.
 * § getUserById(int id): Fetch a user by their ID.
 * § getUserByEmail(String email): Fetch a user by their email.
 * § addUser(User user): Add a new user to the database.
 * § updateUser(User user): Update an existing user in the database.
 * § addMission(Mission mission): Add a new mission to the database.
 * § getMissionsByDriver(int driverId, String status): Get the missions assigned
 * to a driver filtered by their status.
 * § updateMission(Mission mission): Update an existing mission on the database.
 * § getAllProducts(): Get all products in the database.
 * § getProductById(int id): Get a single product by their id.
 * § addDelivery(Delivery delivery): Add a new delivery to the database.
 * ○ Make sure to handle SQL exceptions in each method and log errors
 * appropriately.
 * Phase 2: Authentication and User Management
 * 1. AuthService.java:
 * ○ Provides methods for user authentication and registration.
 * ○ Implement methods:
 * § login(String email, String password): Authenticate a user using their email
 * and password.
 * § register(User user): Register a new user.
 * § updateUser(User user): Update an existing user.
 * ○ Use DatabaseManager to interact with the database.
 * 2. AuthUI.java:
 * ○ Provides the GUI for logging in and registering new users.
 * ○ Handle button click events to call the methods in the AuthService class.
 * Phase 3: Driver Functionality
 * 1. DriverService.java:
 * ○ Provides methods to get and update missions
 * ○ Implement methods:
 * § getAssignedMissions(int driverId): Get all assigned missions for a driver.
 * § getCompletedMissions(int driverId): Get all completed missions for a
 * driver.
 * § markMissionAsComplete(Mission mission): Mark a mission as complete, update
 * its status in the database and update the time of completion.
 * ○ Use DatabaseManager to interact with the database.
 * 2. DriverUI.java:
 * ○ Provides the GUI for the Driver to see their assigned and completed
 * missions.
 * ○ Use the methods in the DriverService class to display mission data.
 * ○ Implement the necessary logic to mark a mission as completed and refresh
 * the data in the UI.
 * Phase 4: Customer Functionality
 * 1. CustomerService.java
 * ○ Provides methods to the customer to create new deliveries
 * ○ Implement methods:
 * § createDelivery(Product product, double quantity, Date deliveryDate, String
 * deliveryAddress): Create a new delivery in the system and persists the data
 * in the database.
 * ○ Use DatabaseManager to interact with the database.
 * 2. CustomerUI.java
 * ○ Provides the GUI for the Customer to create a new delivery.
 * ○ Use the methods in the CustomerService class to handle business logic.
 * Phase 5: Scheduler Functionality
 * 1. SchedulerService.java:
 * ○ Provides methods to the scheduler to manage and assign missions and
 * generate reports.
 * ○ Implement methods:
 * § assignRoute(Delivery delivery, Driver driver): Assigns a route to a driver,
 * creating a new mission.
 * § generateReport(Date date): Generate a word document for all assignments of
 * a specific day.
 * ○ Use DatabaseManager to interact with the database
 * 2. SchedulerUI.java:
 * ○ Provides the GUI to the scheduler to manage the deliveries.
 * ○ Use the methods in the SchedulerService class to handle business logic.
 * Phase 6: Utilities and Main Class
 * 1. AppConstants.java:
 * ○ Store the constants used in the application.
 * 2. GuiUtil.java:
 * ○ Helper class to generate the basic UI components
 * 3. Main.java:
 * The entry point of the application.
 * Initialize the database connection.
 * Launch the AuthUI first.
 * Implementation Strategy
 * • Start Simple: Don't try to implement everything at once. Focus on the core
 * models and the database interaction first, then expand from there.
 * • Test Each Step: After each class implementation, write simple test cases to
 * verify that the code is working correctly.
 * • Incremental Development: Progressively add features and functionality,
 * testing thoroughly along the way.
 * Dependency Injection: Use a dependency injection framework to make your
 * services and classes loosely coupled and easier to test.
 */

/*
 * SET FOREIGN_KEY_CHECKS =0; -- Disable foreign key
 * checksTRUNCATETABLEdelivery_items;
 * TRUNCATE TABLE deliveries;
 * TRUNCATE TABLE missions;
 * TRUNCATE TABLE products;
 * TRUNCATE TABLE categories;
 * TRUNCATE TABLE users;
 * TRUNCATE TABLE stock;
 * TRUNCATE TABLE delivery_items;
 * SET FOREIGN_KEY_CHECKS =1; -- Enable foreign key checks
 */